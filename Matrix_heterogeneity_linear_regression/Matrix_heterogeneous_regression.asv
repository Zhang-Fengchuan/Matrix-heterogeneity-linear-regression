function [Results,results,Results_opt,results_opt,...
        initial,Results_list_opt,Results_single_opt] = Matrix_heterogeneous_regression(simulation_size,Data_x,y_real,sample_size,row_size,col_size,beta_real,gamma_real,...
                                                num_partitions_list,eps_initial,eps_out,iter_max_initial_in,iter_max_initial_out,combine_principle_list,split_principle_list,...
                                                random_number_list,...
                                                ifauto,lambda_size,lambda_start_point,change_constant,log_change_constant,iter_max1,iter_max1_interval,...
                                                iter_max2,iter_max2_interval,iter_max3,iter_max3_interval,eps1,eps1_interval,eps2,eps2_interval,eps3,eps3_interval,...
                                                k,a,lambda_left,lambda_right,c,min_class_num,disp_if,initial_if,initial_position)
 
%
 %-----------------------------------output parameter-----------------------------------------%
 % Results:                  DATA for each simulation (details for each lambda)
 % results:                  data for each simulation (abbreviated information for each lambda)
 % Results_opt:              DATA_opt for each simulation (details for the optimal lambda)
 % results_opt:              data_opt(abbreviated information corresponding to the optimal lambda) for each simulation
 % Results_list_opt:         The table is composed of the abbreviated information corresponding to the optimal lambda of each simulation
 % Results_single_opt:       The table is obtained by synthesizing the evaluation information corresponding to the optimal lambda for each simulation
 % initial:                  Each simulation initial value search algorithm information
 %----------------------------------method of application------------------------------------------%
 % The parameters that must be entered during simulation are : simulation_size、Data_x、y_real、sample_size、row_size、col_size、beta_real、gamma_real
 
 %[Results,results,Results_opt,results_opt,...
 % initial,Results_list_opt,Results_single_opt] = Matrix_heterogeneous_regression(simulation_size,Data_x,y_real,sample_size,row_size,col_size,beta_real,gamma_real,...
 %                                                              [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[])
 
 %The parameters that must be entered when the actual data are: simulation_size、Data_x、y_real、sample_size、row_size、col_size

 % % % Resolve dimensional inconsistencies between multiple simulations and single simulations
 % % if simulation_size == 1
 % %     Data_x = reshape(Data_x, [row_size,col_size,sample_size,1]);
 % %     y_real = reshape(y_real, [sample_size, 1]);
 % % end
 if isempty(num_partitions_list)
     num_partitions_list = 6:8;%The default initial search splits the group number interval 4:8
 end
 if isempty(eps_initial)
     eps_initial = 1e-3;%Default log-likelihood function convergence condition1e-3
 end
 if isempty(eps_out)
     eps_out = 1e-3;%Default initial algorithm convergence condition 1e-3
 end
 if isempty(iter_max_initial_in)
     iter_max_initial_in = 100;%Default maximum number of iteration steps is 10
 end
 if isempty(iter_max_initial_out)
     iter_max_initial_out = 100;%The default maximum number of iteration steps is 10
 end
 if isempty(combine_principle_list)
     combine_principle_list = linspace(0.1, 0.5, 3)*sample_size; %The default merge mechanism threshold is 0.3*sample_size
 end
 if isempty(split_principle_list)
     split_principle_list = linspace(0.6, 0.6, 1)*sample_size;%The default splitting mechanism threshold is 0.6 x sample_size
 end
 if isempty(random_number_list)
     random_number_list = 1:25;%Default random seed list 1:100
 end
 if isempty(ifauto)
     ifauto = 1;%By default, the automatic search interval is 1
 end
 if isempty(lambda_size)
     lambda_size = 25;%The default lambda factor number is 50
 end
 if isempty(lambda_start_point)
     lambda_start_point = 0.3;%The lambda factor search starts at 0.3
 end
 if isempty(change_constant)
     change_constant = 0.9;%The searching variation coefficient of lambda factor interval is 0.5
 end
 if isempty(log_change_constant)
     log_change_constant = 1;%Transform the factor interval of lambda with log-exp transformation coefficients.
 end
 if isempty(iter_max1)
     iter_max1 = 50;%The default maximum number of steps for an internal least squares iteration is 50
 end
 if isempty(iter_max1_interval)
     iter_max1_interval = 50;%Default interval search has a maximum number of steps of 50 for internal least squares iterations
 end
 if isempty(iter_max2)
     iter_max2 = 50;%By default, the maximum number of rounds for descending external coordinates is 50
 end
 if isempty(iter_max2_interval)
     iter_max2_interval = 50;%By default, the maximum number of rounds for external coordinates to descend during interval search is 50
 end
 if isempty(iter_max3)
     iter_max3 = 50;%The default ADMM maximum number of alternate iteration steps is 50
 end
 if isempty(iter_max3_interval)
     iter_max3_interval = 50;%By default, the maximum number of ADMM alternate iteration steps for interval search is 50
 end
 if isempty(eps1)
     eps1 = 1e-3;%The tolerance of the binorm of the difference between the two steps coefficients in the default internal least squares iteration is 1e-4
 end
 if isempty(eps1_interval)
     eps1_interval = 1e-3;%The tolerance of the binorm of the difference between the two steps coefficients in the internal least squares iteration of the default interval search is 1e-4
 end
 if isempty(eps2)
     eps2 = 1e-3;%By default, the tolerance of the binorm of the difference between the coefficients of the two rounds when the external coordinates decline is 1e-4
 end
 if isempty(eps2_interval)
     eps2_interval = 1e-3;%The tolerance of the binorm of the difference between the two rounds of coefficients when the external coordinates decline in default interval search is 1e-4
 end
 if isempty(eps3)
     eps3 = 5e-3;%The tolerance of the default ADMM original residual binary norm is 1e-3
 end
 if isempty(eps3_interval)
     eps3_interval = 5e-3;%The tolerance of ADMM's original residual binorm for default interval search is 1e-3
 end
 if isempty(beta_real)
     beta_real = zeros(sample_size*row_size,1);%When predicting without inputting beta_real, the default beta_real is assumed
 end
 if isempty(gamma_real)
     gamma_real = zeros(sample_size*col_size,1);%When predicting without inputting gamma_real, the default gamma_real is assumed
 end
 if isempty(k)
     k = 10;%The default penalty parameter of the ADMM algorithm is 10
 end
 if isempty(a)
     a = 3;%The default penalty parameter of the ADMM algorithm is 3
 end
 if isempty(lambda_left)
     lambda_left = 0.005;%Manually set the lambda left starting point 0.005
 end
 if isempty(lambda_right)
     lambda_right = 3;%Manually set the lambda right initial point 0.6
 end
 if isempty(c)
     c = 5; %The default weight parameter for the second part of the BIC criterion is 5
 end
 if isempty(min_class_num)
     min_class_num = 2;%The minimum number of acceptable subgroups corresponding to the right endpoint of the default lambda is 2
 end
 if isempty(disp_if)
     disp_if = 1;%Procedure information is not displayed by default
 end
 if isempty(initial_if)
     initial_if = 0; %1:The initial value is not recalculated
 end
 if isempty(initial_position)
     initial_position = 'D:\MATLAB_Document\ADMM_BCD_new\多方法结果\初值\平衡设计\mu=0.5\B2\'; %Initial result storage address
 end
position = strcat(initial_position, '', 'Result_table.mat');
Results = struct;
Results(simulation_size).DATA = [];
results = struct;
results(simulation_size).data = [];
Results_opt = struct;%
Results_opt(simulation_size).DATA = [];
results_opt = struct;%
results_opt(simulation_size).data = [];
Results_list_opt = [];
initial = struct;
initial(simulation_size).beta0 = [];
initial(simulation_size).gamma0 = [];
initial(simulation_size).partitions = [];
initial(simulation_size).result = [];

 for local_i = 1:simulation_size
    %local_i = yangbencishu;
    if initial_if == 0
        y = y_real(:,local_i);%Extract the centered y from the yangbencishu-th simulation and denote it as y.
        x = Data_x(:,:,:,local_i);%Extract the matrix variable from the yangbencishu-th simulation and denote it as x(with dimensions p*q*n)
        %[beta0,gamma0,coefficients,partitions,combine,residual_coefficients,...
        %num_partitions_best,combine_principle_best,split_principle_best,...
        %random_number_best] = k_means_regression_initial(num_partitions_list,eps_initial,eps_out,iter_max_initial_in,...
        %                                            iter_max_initial_out,combine_principle_list,split_principle_list,random_number_list,sample_size,row_size,col_size,x,y,disp_if);
        [beta0, gamma0, partitions, result] = k_means_regression_initial(num_partitions_list, eps_initial, eps_out,...
            iter_max_initial_in, iter_max_initial_out,...
            combine_principle_list, split_principle_list, random_number_list,...
            sample_size, row_size, col_size, x, y, disp_if,...
            beta_real, gamma_real);
        %Partitions(local_i).partitions = partitions;
        initial(local_i).beta0 = beta0;
        initial(local_i).gamma0 = gamma0;
        initial(local_i).partitions = partitions;
        initial(local_i).result = result;
    else
        initial_read = load(position);
        beta0 = cell2mat(initial_read.Result_table.beta_back(local_i));
        gamma0 = cell2mat(initial_read.Result_table.gamma_back(local_i));
        %paritions = initial_read.Result_table.partitions(local_i);
        %result = initial_read.Result_table.per_if(local_i);
        initial(local_i).beta0 = beta0;
        initial(local_i).gamma0 = gamma0;
        %initial(local_i).partitions = partitions;
        %initial(local_i).result = result;
    end
    %-----------------------------------------------------------------------------------------------------% 
    %-----------------------------------------------------------------------------------------------------% 
    y = y_real(:,local_i)-mean(y_real(:,local_i));%Extract the centered y from the 1st simulation and denote it as y
    x = Data_x(:,:,:,local_i);%Take out the matrix variables of the first simulation and write them as x (dimension p*q*n)
    x = x - mean(x,3);
    beta = beta0;
    gamma = gamma0;
    %for i = 1:sample_size %Parameters are processed according to identifiability conditions
    %    identify = sign(gamma(((i-1)*col_size+1)))/sqrt(sum(gamma(((i-1)*col_size+1):(i*col_size)).^2));
    %    beta(((i-1)*row_size+1):(i*row_size)) = beta(((i-1)*row_size+1):(i*row_size))/identify;
    %    gamma(((i-1)*col_size+1):(i*col_size)) = gamma(((i-1)*col_size+1):(i*col_size))*identify;
    %end
    v = zeros(sample_size,sample_size,row_size)*nan;
    w = zeros(sample_size,sample_size,col_size)*nan;
    for i = 1:(sample_size-1)
        for j = i+1:sample_size
            v(i,j,:) = beta(((i-1)*row_size+1):(i*row_size)) - beta(((j-1)*row_size+1):(j*row_size));
            w(i,j,:) = gamma(((i-1)*col_size+1):(i*col_size)) - gamma(((j-1)*col_size+1):(j*col_size));
        end
    end
    kesai = zeros(sample_size,sample_size,row_size);
    yita = zeros(sample_size,sample_size,col_size);
    v_vec = zeros(sample_size*(sample_size-1)*0.5*row_size,1);
    w_vec = zeros(sample_size*(sample_size-1)*0.5*col_size,1);
    v_vec_bar = zeros(sample_size*(sample_size-1)*0.5*row_size,1);
    w_vec_bar = zeros(sample_size*(sample_size-1)*0.5*col_size,1);
    u_vec = [v_vec;w_vec];
    u_vec_bar = [v_vec_bar;w_vec_bar];
    %The range of the difference in the ij-th coefficient of beta in the v_vector (((((2*sample_size-i)*(i-1)/2+(j-i))-1)*row_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*row_size)
    %The range of the difference in the ij-th coefficient of gamma in the w_vector (((((2*sample_size-i)*(i-1)/2+(j-i))-1)*col_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*col_size)
    for i = 1:(sample_size-1)
        for j = (i+1):(sample_size)
            v_vec((((((2*sample_size-i)*(i-1)/2+(j-i))-1)*row_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*row_size)) = v(i,j,:);
            w_vec((((((2*sample_size-i)*(i-1)/2+(j-i))-1)*col_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*col_size)) = w(i,j,:);
        end
    end
    kesai_vec = zeros((sample_size*(sample_size-1)*0.5*row_size),1);
    yita_vec = zeros((sample_size*(sample_size-1)*0.5*col_size),1);
    for i = 1:(sample_size-1)
        for j = (i+1):sample_size
            kesai_vec((((((2*sample_size-i)*(i-1)/2+(j-i))-1)*row_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*row_size)) = kesai(i,j,:);
            yita_vec((((((2*sample_size-i)*(i-1)/2+(j-i))-1)*col_size)+1):((((2*sample_size-i)*(i-1)/2)+(j-i))*col_size)) = yita(i,j,:);
        end
    end
    store_beta = zeros(row_size,sample_size);%%%%%%%%%%%%%%%
    store_gamma = zeros(col_size,sample_size);%%%%%%%%%%%%%%%%%
    %In E,the ((2*sample_size-i)*(i-1)/2)+(j-i))the row is a 1*sample_size indicator vector for ij.
    E = zeros((sample_size*(sample_size-1)*0.5),sample_size);
    for i = 1:(sample_size-1)
        for j = (i+1):sample_size
            e_i = zeros(sample_size,1);
            e_i(i) = 1;
            e_j = zeros(sample_size,1);
            e_j(j) = 1;
            E((((2*sample_size-i)*(i-1)/2)+(j-i)),:) = (e_i - e_j)';
        end
    end
    %The H_p dimension is (number of combinations *p) *(number of samples *p)
    %The H_q dimension is (number of combinations *q) *(number of samples *q).
    H_p = kron(E,eye(row_size));
    H_q = kron(E,eye(col_size));
    %Concatenate x[:,:,sample_size] into a large block diagonal matrix X (with dimensions np*nq)
    %Convert to sample_size cells in the third dimension
    x_cell = mat2cell(x,row_size,col_size,ones(1,sample_size));
    X = blkdiag(x_cell{:});
    one_vec_sample = ones(sample_size,1);
    one_vec_row = ones(row_size,1);
    one_vec_col = ones(col_size,1);
    one_beta = kron(eye(sample_size),one_vec_row');
    one_gamma = kron(eye(sample_size),one_vec_col');
    D_gamma = one_gamma*diag(gamma);
    D_beta = one_beta*diag(beta);
    HH_p = H_p'*H_p;
    HH_q = H_q'*H_q;
    %f1 = 0.5*norm(y-D_beta*X*gamma).^2+0.5*k*norm(H_p*beta-v_vec+kesai_vec/k).^2+0.5*k*norm(H_q*gamma-w_vec+yita_vec/k).^2;
     %-----------------------------------------------------------------------------------------------------% 
     %-----------------------------------------------------------------------------------------------------% 
    [DATA_struct,data,DATA_opt,data_opt] = admm_lambda(ifauto,lambda_size,lambda_start_point,change_constant,log_change_constant,beta0,gamma0,sample_size,row_size,col_size,iter_max1,iter_max1_interval,...
                                 iter_max2,iter_max2_interval,iter_max3,iter_max3_interval,eps1,eps1_interval,eps2,eps2_interval,eps3,eps3_interval,...
                                 H_p,H_q,X,y,k,a,lambda_left,lambda_right,c,v,w,kesai,yita,v_vec,w_vec,kesai_vec,yita_vec,...
                                 store_beta,store_gamma,beta_real,gamma_real,min_class_num,one_beta,one_gamma,HH_p,HH_q);
 
     

 Results(local_i).DATA = DATA_struct;
 results(local_i).data = data;
 Results_opt(local_i).DATA = DATA_opt;
 results_opt(local_i).data = data_opt;
 fprintf('%.1f fusion penalty completed\n',local_i)
 end



for i = 1:simulation_size
Results_list_opt = [Results_list_opt;results_opt(i).data];
end
per = sum(Results_list_opt.per_if)/(simulation_size);
K_mean = mean(Results_list_opt.subgroup_number);
K_sd = std(Results_list_opt.subgroup_number);
SC_mean = mean(Results_list_opt.sc);
SC_sd = std(Results_list_opt.sc);
MSE_beta_mean = mean(Results_list_opt.mse_beta);
MSE_beta_sd = std(Results_list_opt.mse_beta);
MSE_gamma_mean = mean(Results_list_opt.mse_gamma);
MSE_gamma_sd = std(Results_list_opt.mse_gamma);
convergence_mean = mean(Results_list_opt.convergence);
convergence_sd = std(Results_list_opt.convergence);
Results_single_opt = [K_mean,K_sd,per,SC_mean,SC_sd,MSE_beta_mean,MSE_beta_sd,MSE_gamma_mean,MSE_gamma_sd,convergence_mean,convergence_sd];
Results_single_opt = array2table(Results_single_opt, 'VariableNames', {'K_mean','K_sd','per','SC_mean','SC_sd','MSE_beta_mean','MSE_beta_sd',...
                                 'MSE_gamma_mean','MSE_gamma_sd','convergence_mean','convergence_sd'});
save('D:\MATLAB_Document\ADMM_BCD_new\多方法结果\PROPOSED\平衡设计\mu=0.5\B2\RResults2.mat','Results','results','Results_opt',...
     'results_opt','Results_list_opt','Results_single_opt')
end

